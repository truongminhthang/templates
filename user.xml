<templateSet group="user">
  <template name="create adapter" value="import androidx.appcompat.app.AppCompatActivity&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import kotlinx.android.synthetic.main.activity_main.*&#10;import kotlinx.android.synthetic.main.cell.view.*&#10;&#10;class MainActivity : AppCompatActivity() {&#10;&#9;val $list$ = MutableList(100){it}&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_main)&#10;        setupRecyclerView()&#10;    }&#10;    fun setupRecyclerView() {&#10;        $recyclerView$.layoutManager = LinearLayoutManager(this)&#10;        $recyclerView$.adapter = $Adapter$($list$)&#10;    }&#10;}&#10;&#10;&#10;class $Adapter$(val $list$: MutableList&lt;Int&gt;) : RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt;(){&#10;&#9;override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {&#10;&#9;&#9;val itemView = LayoutInflater.from(parent.context).inflate(R.layout.$cell$, parent, false)&#10;&#9;&#9;return $ViewHolder$(itemView)&#10;&#9;}&#10;&#10;&#9;override fun getItemCount(): Int = $list$.size&#10;&#10;&#9;override fun onBindViewHolder(viewHolder: RecyclerView.ViewHolder, position: Int) {&#10;&#9;    if (viewHolder is $ViewHolder$){&#10;&#9;&#9;&#9;viewHolder.itemView.textView.text = $list$[position].toString()&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;&#10;class $ViewHolder$(itemView: View) : RecyclerView.ViewHolder(itemView)&#10;&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="recyclerView" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Adapter" expression="kotlinClassName()" defaultValue="Adapter" alwaysStopAt="true" />
    <variable name="ViewHolder" expression="kotlinClassName()" defaultValue="ViewHolder" alwaysStopAt="true" />
    <variable name="list" expression="kotlinVariable()" defaultValue="list" alwaysStopAt="true" />
    <variable name="cell" expression="kotlinVariable()" defaultValue="cell" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="create recyclerView xml" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;        xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;        xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        tools:context=&quot;.MainActivity&quot;&gt;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot; android:id=&quot;@+id/recyclerView&quot;/&gt;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="create cell xml" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;              android:orientation=&quot;vertical&quot;&#10;              android:layout_width=&quot;match_parent&quot;&#10;              android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;    &lt;TextView&#10;            android:text=&quot;TextView&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/textView&quot; android:layout_margin=&quot;10dp&quot;&#10;            android:textSize=&quot;24sp&quot;/&gt;&#10;&lt;/LinearLayout&gt;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="create menu" value="import android.view.Menu&#10;import android.view.MenuItem&#10;&#10;override fun onCreateOptionsMenu(menu: Menu?): Boolean {&#10;    menuInflater.inflate(R.menu.$menu$, menu)&#10;    return true&#10;}&#10;&#10;override fun onOptionsItemSelected(item: MenuItem?): Boolean {&#10;        return true&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="menu" expression="completeSmart()" defaultValue="menu" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="put back data" value="fun onClickFinish(view: View) {&#10;    myObject?.name = nameEditText.text.toString()&#10;    myObject?.phone = phoneEditText.text.toString()&#10;    intent.putExtra(&quot;putBack&quot;, myObject)&#10;    setResult(0, intent)&#10;    finish()&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="receive data put back" value="override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {&#10;    super.onActivityResult(requestCode, resultCode, data)&#10;    if (data == null) return&#10;    if (requestCode == 0 &amp;&amp; resultCode == 0) {&#10;        val myObject = data.getParcelableExtra&lt;Person&gt;(&quot;putBack&quot;)&#10;        nameEditText.setText(myObject.name!!)&#10;        phoneEditText.setText(myObject.phone!!)&#10;    }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="ival" value="internal val $variable$: $Type$ = $value$   " description="" toReformat="false" toShortenFQNames="true">
    <variable name="variable" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="ivar" value="internal var $variable$: $Type$ = $value$   " description="" toReformat="false" toShortenFQNames="true">
    <variable name="variable" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="pf" value="private fun $functionName$() : $returnValue$ {&#10;    $END$&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="functionName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="returnValue" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="observable" value=" private var $variable$ : $Type$ by Delegates.observable($initValue$) {&#10;    property, oldValue, newValue -&gt;&#10; }" description="" toReformat="false" toShortenFQNames="true">
    <variable name="variable" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="initValue" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="pv" value="private var $variable$: $Type$ = $value$" description="" toReformat="false" toShortenFQNames="true">
    <variable name="variable" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="pl" value="private val $variable$: $Type$ = $value$" description="" toReformat="false" toShortenFQNames="true">
    <variable name="variable" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="bounce animation" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:fillAfter=&quot;true&quot;&#10;    android:interpolator=&quot;@android:anim/bounce_interpolator&quot;&gt;&#10;    &lt;scale&#10;        android:duration=&quot;600&quot;&#10;        android:fromXScale=&quot;1.35&quot;&#10;        android:fromYScale=&quot;1.35&quot;&#10;        android:pivotX=&quot;50%&quot;&#10;        android:pivotY=&quot;50%&quot;&#10;        android:toXScale=&quot;1.0&quot;&#10;        android:toYScale=&quot;1.0&quot;/&gt;&#10;&lt;/set&gt;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="bounce animate" value="private fun animateButton(view: View) {&#10;    val bounceAnimation = AnimationUtils.loadAnimation(this, R.anim.bounce)&#10;    view.startAnimation(bounceAnimation)&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="show popup" value=" private fun showPopup() {&#10;    val dialogTitle = getString(R.string.about_title, BuildConfig.VERSION_NAME)&#10;    val dialogMessage = getString(R.string.about_message)&#10;    val builder = AlertDialog.Builder(this)&#10;    builder.setTitle(dialogTitle)&#10;    builder.setMessage(dialogMessage)&#10;    builder.create().show()&#10; }" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="set Image Resource" value="val id = resources.getIdentifier(&quot;$imageName$&quot;, &quot;drawable&quot;, packageName)&#10;$imageView$.setImageResource(id)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="imageName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="imageView" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="gradle parcelize" value="androidExtensions {&#10;    experimental = true&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="true" />
    </context>
  </template>
  <template name="data class Parcelable" value="import kotlinx.android.parcel.Parcelize&#10;import android.os.Parcelable&#10;@Parcelize&#10;data class $ClassName$(var $parameter$: $ParameterType$): Parcelable" description="" toReformat="false" toShortenFQNames="true">
    <variable name="ClassName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="parameter" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ParameterType" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="exit app" value="    fun exit(view: View) {&#10;        val intent = Intent(Intent.ACTION_MAIN)&#10;        intent.addCategory(Intent.CATEGORY_HOME)&#10;        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK&#10;        startActivity(intent)&#10;//        finish()&#10;    }" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="show custom alert" value="fun showCustomAlert(view: View) {&#10;   var alertDialogBuilder = AlertDialog.Builder(this)&#10;   val dialogView = layoutInflater.inflate( R.layout.login_dialog, null)&#10;   var alertDialog = alertDialogBuilder.setView(dialogView).create()&#10;   alertDialog.show()&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="checkConectivity" value="import android.content.Context&#10;import android.net.ConnectivityManager&#10;import android.widget.Toast&#10;private fun checkConnectivity() {&#10;        val connectivityManager = getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager&#10;        val activityNetwork = connectivityManager.activeNetworkInfo&#10;        if (activityNetwork != null &amp;&amp; activityNetwork.isConnected) {&#10;            Toast.makeText(this, &quot;Network connected&quot;, Toast.LENGTH_SHORT).show()&#10;        } else {&#10;            Toast.makeText(this, &quot;Check network connection&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="pcv" value="private const val LOG_TAG = &quot;$ClassName$&quot;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="ClassName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
</templateSet>